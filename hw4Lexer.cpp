
// Generated from hw4.g4 by ANTLR 4.11.1


#include "hw4Lexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Hw4LexerStaticData final {
  Hw4LexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Hw4LexerStaticData(const Hw4LexerStaticData&) = delete;
  Hw4LexerStaticData(Hw4LexerStaticData&&) = delete;
  Hw4LexerStaticData& operator=(const Hw4LexerStaticData&) = delete;
  Hw4LexerStaticData& operator=(Hw4LexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag hw4lexerLexerOnceFlag;
Hw4LexerStaticData *hw4lexerLexerStaticData = nullptr;

void hw4lexerLexerInitialize() {
  assert(hw4lexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<Hw4LexerStaticData>(
    std::vector<std::string>{
      "T__0", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", 
      "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 
      "QUOTEMARK", "QMARK", "EXMARK", "NEWLINE", "WS", "AND", "ARRAY", "ASM", 
      "BEGIN", "BREAK", "CASE", "CONST", "CONSTRUCTOR", "CONTINUE", "DESTRUCTOR", 
      "DIV", "DO", "DOWNTO", "ELSE", "END", "FALSE", "FILE", "FOR", "FUNCTION", 
      "GOTO", "IF", "IMPLEMENTATION", "IN", "INLINE", "INTERFACE", "LABEL", 
      "MOD", "NIL", "NOT", "OBJECT", "OF", "ON", "OPERATOR", "OR", "PACKED", 
      "PROCEDURE", "PROGRAM", "RECORD", "REPEAT", "SET", "SHL", "SHR", "QUOTE", 
      "CHARACTER", "STRING", "THEN", "TO", "TRUE", "TYPE", "UNIT", "UNTIL", 
      "USES", "VAR", "WHILE", "WITH", "XOR", "INTEGER", "REAL", "IDENTIFIER", 
      "PLUSOP", "MINUSOP", "DIVOP", "MULTOP", "ASSIGN", "EQUAL", "NE", "LTEQ", 
      "GTEQ", "LT", "GT", "PLUSEQUAL", "MINUSEQUAL", "MULTEQUAL", "DIVEQUAL", 
      "CARAT", "SEMICOLOR", "COMMA", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
      "LBRACE", "RBRACE", "LCOMMENT", "RCOMMENT", "CHARACTER_CHAR", "STRING_CHAR"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'.'", "':'", "'\\u003F'", "'!'", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "'''", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'+'", "'-'", "'/'", "'*'", "':='", "'='", "'<>'", 
      "'<='", "'>='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'^'", 
      "';'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'(*'", "'*)'"
    },
    std::vector<std::string>{
      "", "", "QUOTEMARK", "QMARK", "EXMARK", "NEWLINE", "WS", "AND", "ARRAY", 
      "ASM", "BEGIN", "BREAK", "CASE", "CONST", "CONSTRUCTOR", "CONTINUE", 
      "DESTRUCTOR", "DIV", "DO", "DOWNTO", "ELSE", "END", "FALSE", "FILE", 
      "FOR", "FUNCTION", "GOTO", "IF", "IMPLEMENTATION", "IN", "INLINE", 
      "INTERFACE", "LABEL", "MOD", "NIL", "NOT", "OBJECT", "OF", "ON", "OPERATOR", 
      "OR", "PACKED", "PROCEDURE", "PROGRAM", "RECORD", "REPEAT", "SET", 
      "SHL", "SHR", "QUOTE", "CHARACTER", "STRING", "THEN", "TO", "TRUE", 
      "TYPE", "UNIT", "UNTIL", "USES", "VAR", "WHILE", "WITH", "XOR", "INTEGER", 
      "REAL", "IDENTIFIER", "PLUSOP", "MINUSOP", "DIVOP", "MULTOP", "ASSIGN", 
      "EQUAL", "NE", "LTEQ", "GTEQ", "LT", "GT", "PLUSEQUAL", "MINUSEQUAL", 
      "MULTEQUAL", "DIVEQUAL", "CARAT", "SEMICOLOR", "COMMA", "LPAREN", 
      "RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "LCOMMENT", 
      "RCOMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,91,738,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
  	1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
  	1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
  	1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
  	1,27,1,27,1,28,1,28,1,29,1,29,1,30,3,30,301,8,30,1,30,1,30,1,30,1,30,
  	1,31,4,31,308,8,31,11,31,12,31,309,1,31,1,31,1,32,1,32,1,32,1,32,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
  	1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,
  	1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,
  	1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
  	1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,
  	1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
  	1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,
  	1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,
  	1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,
  	1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,
  	1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,
  	1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,75,1,75,
  	1,75,1,75,1,76,1,76,5,76,575,8,76,10,76,12,76,578,9,76,1,76,1,76,1,77,
  	1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,
  	1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,
  	1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,
  	1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,88,4,88,636,8,88,
  	11,88,12,88,637,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,647,8,89,1,89,
  	1,89,1,89,1,89,1,89,1,89,1,89,3,89,656,8,89,1,89,1,89,3,89,660,8,89,1,
  	90,1,90,5,90,664,8,90,10,90,12,90,667,9,90,1,91,1,91,1,92,1,92,1,93,1,
  	93,1,94,1,94,1,95,1,95,1,95,1,96,1,96,1,97,1,97,1,97,1,98,1,98,1,98,1,
  	99,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,102,1,103,1,103,1,
  	103,1,104,1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,107,1,107,1,108,
  	1,108,1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,
  	1,114,1,115,1,115,1,115,1,116,1,116,1,116,1,117,1,117,1,118,1,118,1,118,
  	1,118,3,118,737,8,118,0,0,119,1,1,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,
  	19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,
  	47,0,49,0,51,0,53,0,55,2,57,3,59,4,61,5,63,6,65,7,67,8,69,9,71,10,73,
  	11,75,12,77,13,79,14,81,15,83,16,85,17,87,18,89,19,91,20,93,21,95,22,
  	97,23,99,24,101,25,103,26,105,27,107,28,109,29,111,30,113,31,115,32,117,
  	33,119,34,121,35,123,36,125,37,127,38,129,39,131,40,133,41,135,42,137,
  	43,139,44,141,45,143,46,145,47,147,48,149,49,151,50,153,51,155,52,157,
  	53,159,54,161,55,163,56,165,57,167,58,169,59,171,60,173,61,175,62,177,
  	63,179,64,181,65,183,66,185,67,187,68,189,69,191,70,193,71,195,72,197,
  	73,199,74,201,75,203,76,205,77,207,78,209,79,211,80,213,81,215,82,217,
  	83,219,84,221,85,223,86,225,87,227,88,229,89,231,90,233,91,235,0,237,
  	0,1,0,32,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,
  	100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,
  	104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,
  	108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,
  	112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,
  	116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,
  	120,2,0,89,89,121,121,2,0,90,90,122,122,2,0,9,9,32,32,1,0,48,57,2,0,43,
  	43,45,45,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,39,39,719,0,1,1,
  	0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
  	0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
  	75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
  	0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
  	0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
  	0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
  	0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
  	0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
  	0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,
  	0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
  	0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,
  	0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,
  	0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,
  	0,187,1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,
  	0,197,1,0,0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,
  	0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,
  	0,217,1,0,0,0,0,219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,
  	0,227,1,0,0,0,0,229,1,0,0,0,0,231,1,0,0,0,0,233,1,0,0,0,1,239,1,0,0,0,
  	3,241,1,0,0,0,5,243,1,0,0,0,7,245,1,0,0,0,9,247,1,0,0,0,11,249,1,0,0,
  	0,13,251,1,0,0,0,15,253,1,0,0,0,17,255,1,0,0,0,19,257,1,0,0,0,21,259,
  	1,0,0,0,23,261,1,0,0,0,25,263,1,0,0,0,27,265,1,0,0,0,29,267,1,0,0,0,31,
  	269,1,0,0,0,33,271,1,0,0,0,35,273,1,0,0,0,37,275,1,0,0,0,39,277,1,0,0,
  	0,41,279,1,0,0,0,43,281,1,0,0,0,45,283,1,0,0,0,47,285,1,0,0,0,49,287,
  	1,0,0,0,51,289,1,0,0,0,53,291,1,0,0,0,55,293,1,0,0,0,57,295,1,0,0,0,59,
  	297,1,0,0,0,61,300,1,0,0,0,63,307,1,0,0,0,65,313,1,0,0,0,67,317,1,0,0,
  	0,69,323,1,0,0,0,71,327,1,0,0,0,73,333,1,0,0,0,75,339,1,0,0,0,77,344,
  	1,0,0,0,79,350,1,0,0,0,81,362,1,0,0,0,83,371,1,0,0,0,85,382,1,0,0,0,87,
  	386,1,0,0,0,89,389,1,0,0,0,91,396,1,0,0,0,93,401,1,0,0,0,95,405,1,0,0,
  	0,97,411,1,0,0,0,99,416,1,0,0,0,101,420,1,0,0,0,103,429,1,0,0,0,105,434,
  	1,0,0,0,107,437,1,0,0,0,109,452,1,0,0,0,111,455,1,0,0,0,113,462,1,0,0,
  	0,115,472,1,0,0,0,117,478,1,0,0,0,119,482,1,0,0,0,121,486,1,0,0,0,123,
  	490,1,0,0,0,125,497,1,0,0,0,127,500,1,0,0,0,129,503,1,0,0,0,131,512,1,
  	0,0,0,133,515,1,0,0,0,135,522,1,0,0,0,137,532,1,0,0,0,139,540,1,0,0,0,
  	141,547,1,0,0,0,143,554,1,0,0,0,145,558,1,0,0,0,147,562,1,0,0,0,149,566,
  	1,0,0,0,151,568,1,0,0,0,153,572,1,0,0,0,155,581,1,0,0,0,157,586,1,0,0,
  	0,159,589,1,0,0,0,161,594,1,0,0,0,163,599,1,0,0,0,165,604,1,0,0,0,167,
  	610,1,0,0,0,169,615,1,0,0,0,171,619,1,0,0,0,173,625,1,0,0,0,175,630,1,
  	0,0,0,177,635,1,0,0,0,179,659,1,0,0,0,181,661,1,0,0,0,183,668,1,0,0,0,
  	185,670,1,0,0,0,187,672,1,0,0,0,189,674,1,0,0,0,191,676,1,0,0,0,193,679,
  	1,0,0,0,195,681,1,0,0,0,197,684,1,0,0,0,199,687,1,0,0,0,201,690,1,0,0,
  	0,203,692,1,0,0,0,205,694,1,0,0,0,207,697,1,0,0,0,209,700,1,0,0,0,211,
  	703,1,0,0,0,213,706,1,0,0,0,215,708,1,0,0,0,217,710,1,0,0,0,219,712,1,
  	0,0,0,221,714,1,0,0,0,223,716,1,0,0,0,225,718,1,0,0,0,227,720,1,0,0,0,
  	229,722,1,0,0,0,231,724,1,0,0,0,233,727,1,0,0,0,235,730,1,0,0,0,237,736,
  	1,0,0,0,239,240,5,46,0,0,240,2,1,0,0,0,241,242,7,0,0,0,242,4,1,0,0,0,
  	243,244,7,1,0,0,244,6,1,0,0,0,245,246,7,2,0,0,246,8,1,0,0,0,247,248,7,
  	3,0,0,248,10,1,0,0,0,249,250,7,4,0,0,250,12,1,0,0,0,251,252,7,5,0,0,252,
  	14,1,0,0,0,253,254,7,6,0,0,254,16,1,0,0,0,255,256,7,7,0,0,256,18,1,0,
  	0,0,257,258,7,8,0,0,258,20,1,0,0,0,259,260,7,9,0,0,260,22,1,0,0,0,261,
  	262,7,10,0,0,262,24,1,0,0,0,263,264,7,11,0,0,264,26,1,0,0,0,265,266,7,
  	12,0,0,266,28,1,0,0,0,267,268,7,13,0,0,268,30,1,0,0,0,269,270,7,14,0,
  	0,270,32,1,0,0,0,271,272,7,15,0,0,272,34,1,0,0,0,273,274,7,16,0,0,274,
  	36,1,0,0,0,275,276,7,17,0,0,276,38,1,0,0,0,277,278,7,18,0,0,278,40,1,
  	0,0,0,279,280,7,19,0,0,280,42,1,0,0,0,281,282,7,20,0,0,282,44,1,0,0,0,
  	283,284,7,21,0,0,284,46,1,0,0,0,285,286,7,22,0,0,286,48,1,0,0,0,287,288,
  	7,23,0,0,288,50,1,0,0,0,289,290,7,24,0,0,290,52,1,0,0,0,291,292,7,25,
  	0,0,292,54,1,0,0,0,293,294,5,58,0,0,294,56,1,0,0,0,295,296,5,63,0,0,296,
  	58,1,0,0,0,297,298,5,33,0,0,298,60,1,0,0,0,299,301,5,13,0,0,300,299,1,
  	0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,5,10,0,0,303,304,1,0,0,
  	0,304,305,6,30,0,0,305,62,1,0,0,0,306,308,7,26,0,0,307,306,1,0,0,0,308,
  	309,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,6,
  	31,0,0,312,64,1,0,0,0,313,314,3,3,1,0,314,315,3,29,14,0,315,316,3,9,4,
  	0,316,66,1,0,0,0,317,318,3,3,1,0,318,319,3,37,18,0,319,320,3,37,18,0,
  	320,321,3,3,1,0,321,322,3,51,25,0,322,68,1,0,0,0,323,324,3,3,1,0,324,
  	325,3,39,19,0,325,326,3,27,13,0,326,70,1,0,0,0,327,328,3,5,2,0,328,329,
  	3,11,5,0,329,330,3,15,7,0,330,331,3,19,9,0,331,332,3,29,14,0,332,72,1,
  	0,0,0,333,334,3,5,2,0,334,335,3,37,18,0,335,336,3,11,5,0,336,337,3,3,
  	1,0,337,338,3,23,11,0,338,74,1,0,0,0,339,340,3,7,3,0,340,341,3,3,1,0,
  	341,342,3,39,19,0,342,343,3,11,5,0,343,76,1,0,0,0,344,345,3,7,3,0,345,
  	346,3,31,15,0,346,347,3,29,14,0,347,348,3,39,19,0,348,349,3,41,20,0,349,
  	78,1,0,0,0,350,351,3,7,3,0,351,352,3,31,15,0,352,353,3,29,14,0,353,354,
  	3,39,19,0,354,355,3,41,20,0,355,356,3,37,18,0,356,357,3,43,21,0,357,358,
  	3,7,3,0,358,359,3,41,20,0,359,360,3,31,15,0,360,361,3,37,18,0,361,80,
  	1,0,0,0,362,363,3,7,3,0,363,364,3,31,15,0,364,365,3,29,14,0,365,366,3,
  	41,20,0,366,367,3,19,9,0,367,368,3,29,14,0,368,369,3,43,21,0,369,370,
  	3,11,5,0,370,82,1,0,0,0,371,372,3,9,4,0,372,373,3,11,5,0,373,374,3,39,
  	19,0,374,375,3,41,20,0,375,376,3,37,18,0,376,377,3,43,21,0,377,378,3,
  	7,3,0,378,379,3,41,20,0,379,380,3,31,15,0,380,381,3,37,18,0,381,84,1,
  	0,0,0,382,383,3,9,4,0,383,384,3,19,9,0,384,385,3,45,22,0,385,86,1,0,0,
  	0,386,387,3,9,4,0,387,388,3,31,15,0,388,88,1,0,0,0,389,390,3,9,4,0,390,
  	391,3,31,15,0,391,392,3,47,23,0,392,393,3,29,14,0,393,394,3,41,20,0,394,
  	395,3,31,15,0,395,90,1,0,0,0,396,397,3,11,5,0,397,398,3,25,12,0,398,399,
  	3,39,19,0,399,400,3,11,5,0,400,92,1,0,0,0,401,402,3,11,5,0,402,403,3,
  	29,14,0,403,404,3,9,4,0,404,94,1,0,0,0,405,406,3,13,6,0,406,407,3,3,1,
  	0,407,408,3,25,12,0,408,409,3,39,19,0,409,410,3,11,5,0,410,96,1,0,0,0,
  	411,412,3,13,6,0,412,413,3,19,9,0,413,414,3,25,12,0,414,415,3,11,5,0,
  	415,98,1,0,0,0,416,417,3,13,6,0,417,418,3,31,15,0,418,419,3,37,18,0,419,
  	100,1,0,0,0,420,421,3,13,6,0,421,422,3,43,21,0,422,423,3,29,14,0,423,
  	424,3,7,3,0,424,425,3,41,20,0,425,426,3,19,9,0,426,427,3,31,15,0,427,
  	428,3,29,14,0,428,102,1,0,0,0,429,430,3,15,7,0,430,431,3,31,15,0,431,
  	432,3,41,20,0,432,433,3,31,15,0,433,104,1,0,0,0,434,435,3,19,9,0,435,
  	436,3,13,6,0,436,106,1,0,0,0,437,438,3,19,9,0,438,439,3,27,13,0,439,440,
  	3,33,16,0,440,441,3,25,12,0,441,442,3,11,5,0,442,443,3,27,13,0,443,444,
  	3,11,5,0,444,445,3,29,14,0,445,446,3,41,20,0,446,447,3,3,1,0,447,448,
  	3,41,20,0,448,449,3,19,9,0,449,450,3,31,15,0,450,451,3,29,14,0,451,108,
  	1,0,0,0,452,453,3,19,9,0,453,454,3,29,14,0,454,110,1,0,0,0,455,456,3,
  	19,9,0,456,457,3,29,14,0,457,458,3,25,12,0,458,459,3,19,9,0,459,460,3,
  	29,14,0,460,461,3,11,5,0,461,112,1,0,0,0,462,463,3,19,9,0,463,464,3,29,
  	14,0,464,465,3,41,20,0,465,466,3,11,5,0,466,467,3,37,18,0,467,468,3,13,
  	6,0,468,469,3,3,1,0,469,470,3,7,3,0,470,471,3,11,5,0,471,114,1,0,0,0,
  	472,473,3,25,12,0,473,474,3,3,1,0,474,475,3,5,2,0,475,476,3,11,5,0,476,
  	477,3,25,12,0,477,116,1,0,0,0,478,479,3,27,13,0,479,480,3,31,15,0,480,
  	481,3,9,4,0,481,118,1,0,0,0,482,483,3,29,14,0,483,484,3,19,9,0,484,485,
  	3,25,12,0,485,120,1,0,0,0,486,487,3,29,14,0,487,488,3,31,15,0,488,489,
  	3,41,20,0,489,122,1,0,0,0,490,491,3,31,15,0,491,492,3,5,2,0,492,493,3,
  	21,10,0,493,494,3,11,5,0,494,495,3,7,3,0,495,496,3,41,20,0,496,124,1,
  	0,0,0,497,498,3,31,15,0,498,499,3,13,6,0,499,126,1,0,0,0,500,501,3,31,
  	15,0,501,502,3,29,14,0,502,128,1,0,0,0,503,504,3,31,15,0,504,505,3,33,
  	16,0,505,506,3,11,5,0,506,507,3,37,18,0,507,508,3,3,1,0,508,509,3,41,
  	20,0,509,510,3,31,15,0,510,511,3,37,18,0,511,130,1,0,0,0,512,513,3,31,
  	15,0,513,514,3,37,18,0,514,132,1,0,0,0,515,516,3,33,16,0,516,517,3,3,
  	1,0,517,518,3,7,3,0,518,519,3,23,11,0,519,520,3,11,5,0,520,521,3,9,4,
  	0,521,134,1,0,0,0,522,523,3,33,16,0,523,524,3,37,18,0,524,525,3,31,15,
  	0,525,526,3,7,3,0,526,527,3,11,5,0,527,528,3,9,4,0,528,529,3,43,21,0,
  	529,530,3,37,18,0,530,531,3,11,5,0,531,136,1,0,0,0,532,533,3,33,16,0,
  	533,534,3,37,18,0,534,535,3,31,15,0,535,536,3,15,7,0,536,537,3,37,18,
  	0,537,538,3,3,1,0,538,539,3,27,13,0,539,138,1,0,0,0,540,541,3,37,18,0,
  	541,542,3,11,5,0,542,543,3,7,3,0,543,544,3,31,15,0,544,545,3,37,18,0,
  	545,546,3,9,4,0,546,140,1,0,0,0,547,548,3,37,18,0,548,549,3,11,5,0,549,
  	550,3,33,16,0,550,551,3,11,5,0,551,552,3,3,1,0,552,553,3,41,20,0,553,
  	142,1,0,0,0,554,555,3,39,19,0,555,556,3,11,5,0,556,557,3,41,20,0,557,
  	144,1,0,0,0,558,559,3,39,19,0,559,560,3,17,8,0,560,561,3,25,12,0,561,
  	146,1,0,0,0,562,563,3,39,19,0,563,564,3,17,8,0,564,565,3,37,18,0,565,
  	148,1,0,0,0,566,567,5,39,0,0,567,150,1,0,0,0,568,569,3,149,74,0,569,570,
  	3,235,117,0,570,571,3,149,74,0,571,152,1,0,0,0,572,576,3,149,74,0,573,
  	575,3,237,118,0,574,573,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,
  	1,0,0,0,577,579,1,0,0,0,578,576,1,0,0,0,579,580,3,149,74,0,580,154,1,
  	0,0,0,581,582,3,41,20,0,582,583,3,17,8,0,583,584,3,11,5,0,584,585,3,29,
  	14,0,585,156,1,0,0,0,586,587,3,41,20,0,587,588,3,31,15,0,588,158,1,0,
  	0,0,589,590,3,41,20,0,590,591,3,37,18,0,591,592,3,43,21,0,592,593,3,11,
  	5,0,593,160,1,0,0,0,594,595,3,41,20,0,595,596,3,51,25,0,596,597,3,33,
  	16,0,597,598,3,11,5,0,598,162,1,0,0,0,599,600,3,43,21,0,600,601,3,29,
  	14,0,601,602,3,19,9,0,602,603,3,41,20,0,603,164,1,0,0,0,604,605,3,43,
  	21,0,605,606,3,29,14,0,606,607,3,41,20,0,607,608,3,19,9,0,608,609,3,25,
  	12,0,609,166,1,0,0,0,610,611,3,43,21,0,611,612,3,39,19,0,612,613,3,11,
  	5,0,613,614,3,39,19,0,614,168,1,0,0,0,615,616,3,45,22,0,616,617,3,3,1,
  	0,617,618,3,37,18,0,618,170,1,0,0,0,619,620,3,47,23,0,620,621,3,17,8,
  	0,621,622,3,19,9,0,622,623,3,25,12,0,623,624,3,11,5,0,624,172,1,0,0,0,
  	625,626,3,47,23,0,626,627,3,19,9,0,627,628,3,41,20,0,628,629,3,17,8,0,
  	629,174,1,0,0,0,630,631,3,49,24,0,631,632,3,31,15,0,632,633,3,37,18,0,
  	633,176,1,0,0,0,634,636,7,27,0,0,635,634,1,0,0,0,636,637,1,0,0,0,637,
  	635,1,0,0,0,637,638,1,0,0,0,638,178,1,0,0,0,639,640,3,177,88,0,640,641,
  	5,46,0,0,641,642,3,177,88,0,642,660,1,0,0,0,643,644,3,177,88,0,644,646,
  	7,4,0,0,645,647,7,28,0,0,646,645,1,0,0,0,646,647,1,0,0,0,647,648,1,0,
  	0,0,648,649,3,177,88,0,649,660,1,0,0,0,650,651,3,177,88,0,651,652,5,46,
  	0,0,652,653,3,177,88,0,653,655,7,4,0,0,654,656,7,28,0,0,655,654,1,0,0,
  	0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,3,177,88,0,658,660,1,0,0,0,
  	659,639,1,0,0,0,659,643,1,0,0,0,659,650,1,0,0,0,660,180,1,0,0,0,661,665,
  	7,29,0,0,662,664,7,30,0,0,663,662,1,0,0,0,664,667,1,0,0,0,665,663,1,0,
  	0,0,665,666,1,0,0,0,666,182,1,0,0,0,667,665,1,0,0,0,668,669,5,43,0,0,
  	669,184,1,0,0,0,670,671,5,45,0,0,671,186,1,0,0,0,672,673,5,47,0,0,673,
  	188,1,0,0,0,674,675,5,42,0,0,675,190,1,0,0,0,676,677,5,58,0,0,677,678,
  	5,61,0,0,678,192,1,0,0,0,679,680,5,61,0,0,680,194,1,0,0,0,681,682,5,60,
  	0,0,682,683,5,62,0,0,683,196,1,0,0,0,684,685,5,60,0,0,685,686,5,61,0,
  	0,686,198,1,0,0,0,687,688,5,62,0,0,688,689,5,61,0,0,689,200,1,0,0,0,690,
  	691,5,60,0,0,691,202,1,0,0,0,692,693,5,62,0,0,693,204,1,0,0,0,694,695,
  	5,43,0,0,695,696,5,61,0,0,696,206,1,0,0,0,697,698,5,45,0,0,698,699,5,
  	61,0,0,699,208,1,0,0,0,700,701,5,42,0,0,701,702,5,61,0,0,702,210,1,0,
  	0,0,703,704,5,47,0,0,704,705,5,61,0,0,705,212,1,0,0,0,706,707,5,94,0,
  	0,707,214,1,0,0,0,708,709,5,59,0,0,709,216,1,0,0,0,710,711,5,44,0,0,711,
  	218,1,0,0,0,712,713,5,40,0,0,713,220,1,0,0,0,714,715,5,41,0,0,715,222,
  	1,0,0,0,716,717,5,91,0,0,717,224,1,0,0,0,718,719,5,93,0,0,719,226,1,0,
  	0,0,720,721,5,123,0,0,721,228,1,0,0,0,722,723,5,125,0,0,723,230,1,0,0,
  	0,724,725,5,40,0,0,725,726,5,42,0,0,726,232,1,0,0,0,727,728,5,42,0,0,
  	728,729,5,41,0,0,729,234,1,0,0,0,730,731,8,31,0,0,731,236,1,0,0,0,732,
  	733,3,149,74,0,733,734,3,149,74,0,734,737,1,0,0,0,735,737,8,31,0,0,736,
  	732,1,0,0,0,736,735,1,0,0,0,737,238,1,0,0,0,10,0,300,309,576,637,646,
  	655,659,665,736,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  hw4lexerLexerStaticData = staticData.release();
}

}

hw4Lexer::hw4Lexer(CharStream *input) : Lexer(input) {
  hw4Lexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *hw4lexerLexerStaticData->atn, hw4lexerLexerStaticData->decisionToDFA, hw4lexerLexerStaticData->sharedContextCache);
}

hw4Lexer::~hw4Lexer() {
  delete _interpreter;
}

std::string hw4Lexer::getGrammarFileName() const {
  return "hw4.g4";
}

const std::vector<std::string>& hw4Lexer::getRuleNames() const {
  return hw4lexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& hw4Lexer::getChannelNames() const {
  return hw4lexerLexerStaticData->channelNames;
}

const std::vector<std::string>& hw4Lexer::getModeNames() const {
  return hw4lexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& hw4Lexer::getVocabulary() const {
  return hw4lexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView hw4Lexer::getSerializedATN() const {
  return hw4lexerLexerStaticData->serializedATN;
}

const atn::ATN& hw4Lexer::getATN() const {
  return *hw4lexerLexerStaticData->atn;
}




void hw4Lexer::initialize() {
  ::antlr4::internal::call_once(hw4lexerLexerOnceFlag, hw4lexerLexerInitialize);
}
